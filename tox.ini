# Tox (http://codespeak.net/~hpk/tox/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist =
    # === Core ===
    py{3.4,3.5,3.6,3.7,3.8,3.9}
    pypy

[testenv]
deps =
    # if you change test-requirements.txt and your change is not being reflected
    # in what's installed by tox (when running tox locally), try running tox
    # with the -r flag
    -r test-requirements.txt
setenv =
    PYTHONDONTWRITEBYTECODE=1
    TESTPATH=tests
    COVERAGE_FILE=.coverage-{envname}
passenv =
    SENTRY_PYTHON_TEST_AWS_ACCESS_KEY_ID
    SENTRY_PYTHON_TEST_AWS_SECRET_ACCESS_KEY
    SENTRY_PYTHON_TEST_AWS_IAM_ROLE
    SENTRY_PYTHON_TEST_POSTGRES_USER
    SENTRY_PYTHON_TEST_POSTGRES_NAME
usedevelop = True
basepython =
    py3.4: python3.4
    py3.5: python3.5
    py3.6: python3.6
    py3.7: python3.7
    py3.8: python3.8
    py3.9: python3.9

    # Python version is pinned here because flake8 actually behaves differently
    # depending on which version is used. You can patch this out to point to
    # some random Python 3 binary, but then you get guaranteed mismatches with
    # CI. Other tools such as mypy and black have options that pin the Python
    # version.
    linters: python3.9
    pypy: pypy
commands =
    py.test {env:TESTPATH} {posargs}

[testenv:linters]
deps =
    -r linter-requirements.txt
commands =
    flake8 tests examples snuba_sdk
    black --check tests examples snuba_sdk
    mypy --config-file mypy.ini tests examples snuba_sdk
